/**
 *
 * 文 件 名 : EscPrint.h
 * 创建日期 : 2012-10-17 13:12
 * 作    者 : 邵凯田(skt001@163.com)
 * 修改日期 : $Date: $
 * 当前版本 : $Revision: $
 * 功能描述 : ESC(EPSON Standard Code for Printer)指令集打印基类
 * 修改记录 : 
 *            $Log: $
 *
 **/


#ifndef __SKT_ESC_PRINT_H_
#define __SKT_ESC_PRINT_H_

#include "../SApi.h"

#pragma pack(2)
struct SBASE_ESCPRINT_EXPORT stuBitmapFileHeader//位图文件头(bitmap-file header)
{ /* bmfh */
	WORD bfType;		//说明文件的类型
	DWORD bfSize;		//说明文件的大小，用字节为单位
	WORD bfReserved1;	//保留，设置为0
	WORD bfReserved2;	//保留，设置为0
	DWORD bfOffBits;	//说明从BITMAPFILEHEADER结构开始到实际的图像数据之间的字 节偏移量
};

struct SBASE_ESCPRINT_EXPORT stuBitmapInfoHeader//位图信息头(bitmap-information header)
 { /* bmih */
	DWORD biSize;		//说明BITMAPINFOHEADER结构所需要的字节数
	DWORD biWidth;		//说明图像的宽度，以像素为单位
	DWORD biHeight;		//说明图像的高度，以像素为单位
	WORD biPlanes;		//为目标设备说明位面数，其值设置为1
	WORD biBitCount;	//说明位数/像素，其值为1、2、4或者24
	DWORD biCompression;//说明图像数据压缩的类型。其值可以是下述值之一：
						//BI_RGB：没有压缩； 
						//BI_RLE8：每个像素8位的RLE压缩编码，压缩格式由2字节组成(重复像素计数和颜色索引)； 
						//BI_RLE4：每个像素4位的RLE压缩编码，压缩格式由2字节组成
	DWORD biSizeImage;	//说明图像的大小，以字节为单位。当用BI_RGB格式时，可设置为0
	DWORD biXPelsPerMeter;//说明水平分辨率，用像素/米表示
	DWORD biYPelsPerMeter;//说明垂直分辨率，用像素/米表示
	DWORD biClrUsed;	//说明位图实际使用的彩色表中的颜色索引数
	DWORD biClrImportant;//说明对图像显示有重要影响的颜色索引的数目，如果是0，表示都重要。
};

struct SBASE_ESCPRINT_EXPORT stuBitmapRGBQUAD 
{ /* rgbq */
	BYTE rgbBlue;		//指定蓝色强度
	BYTE rgbGreen;		//指定绿色强度
	BYTE rgbRed;		//指定红色强度
	BYTE rgbReserved;	//保留，设置为0
};

struct SBASE_ESCPRINT_EXPORT stuBitmapInfo
{ /* bmi */
	stuBitmapInfoHeader bmiHeader;	//说明stuBitmapInfoHeader结构
	stuBitmapRGBQUAD bmiColors[1];		//说明彩色表stuBitmapRGBQUAD结构的阵列
};
#pragma pack()


//////////////////////////////////////////////////////////////////////////
// 名    称:  SEscPrint
// 作    者:  邵凯田
// 创建时间:  2012-10-17 13:20
// 描    述:  ESE指令集打印基类
//////////////////////////////////////////////////////////////////////////
class SBASE_ESCPRINT_EXPORT SEscPrint
{
public:
	SEscPrint();
	virtual ~SEscPrint();

	//////////////////////// interface functions /////////////////////////////

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  打印初始化
	// 作    者:  邵凯田
	// 创建时间:  2012-10-17 13:46
	// 参数说明:  @sAttr为扩展属性，不同实现类提供不同的参数
	// 返 回 值:  true表示初始化成功,false表示初始化失败
	//////////////////////////////////////////////////////////////////////////
	virtual bool Init(SString sAttr)=0;

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  打开打印机
	// 作    者:  邵凯田
	// 创建时间:  2012-10-17 13:23
	// 参数说明:  @sAttr为打印机参数
	// 返 回 值:  true打开成功，false打开失败
	//////////////////////////////////////////////////////////////////////////
	virtual bool Open(SString sAttr);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  关闭打印机
	// 作    者:  邵凯田
	// 创建时间:  2012-10-17 13:26
	// 参数说明:  void
	// 返 回 值:  true关闭成功，false关闭失败
	//////////////////////////////////////////////////////////////////////////
	virtual bool Close()=0;

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  向打印机写数据
	// 作    者:  邵凯田
	// 创建时间:  2012-10-17 13:31
	// 参数说明:  @pBuffer待写入内容缓冲区指针
	//            @iLen为缓冲区字节长度
	// 返 回 值:  >0表示实际发送字节数，<=0表示失败
	//////////////////////////////////////////////////////////////////////////
	virtual int Write(BYTE *pBuffer,int iLen)=0;

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  从打印机读取数据
	// 作    者:  邵凯田
	// 创建时间:  2012-10-17 13:35
	// 参数说明:  @pBuffer为待读入缓冲区指针
	//            @iLen为期望读取字节长度
	// 返 回 值:  >0表示实际读取字节数，<0表示读取失败，=0表示读取超时
	//////////////////////////////////////////////////////////////////////////
	virtual int Read(BYTE *pBuffer,int iLen)=0;

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  是否已经打开了打印机
	// 作    者:  邵凯田
	// 创建时间:  2012-10-17 15:24
	// 参数说明:  void
	// 返 回 值:  true/false
	//////////////////////////////////////////////////////////////////////////
	virtual bool IsOpened()=0;


	///////////////////////// ESC main functions /////////////////////////////
	
	//////////////////////////////////////////////////////////////////////////
	// 描    述:  选择文本打印模式
	// 作    者:  邵凯田
	// 创建时间:  2012-10-17 15:34
	// 参数说明:  void
	// 返 回 值:  true/false
	//////////////////////////////////////////////////////////////////////////
	bool SwitchTextMode();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  选择图形打印模式
	// 作    者:  邵凯田
	// 创建时间:  2012-10-17 15:35
	// 参数说明:  void
	// 返 回 值:  true/false
	//////////////////////////////////////////////////////////////////////////
	bool SwitchGraphicMode();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  打印文本
	// 作    者:  邵凯田
	// 创建时间:  2012-10-17 15:41
	// 参数说明:  @str为文本内容，\n为换行，换行时不需要\r符
	// 返 回 值:  true/false
	//////////////////////////////////////////////////////////////////////////
	bool PrintText(SString str);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  打印指定的BMP文件，该文件必须为1位颜色的黑白图片
	// 作    者:  邵凯田
	// 创建时间:  2012-10-17 18:13
	// 参数说明:  @sBmpFile为文件名全路径
	// 返 回 值:  true/false
	//////////////////////////////////////////////////////////////////////////
	bool PrintBmpFile(SString sBmpFile);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  打印指定大小及缓冲区的单色图片
	// 作    者:  邵凯田
	// 创建时间:  2012-10-17 18:32
	// 参数说明:  @w为图片宽度
	//            @h为图片高度
	//            @pBuffer为图片内容缓冲区指针
	//            @iBytes为图片内容缓冲区字节数
	// 返 回 值:  true/false
	//////////////////////////////////////////////////////////////////////////
	bool PrintMonochromeBmpMem(int w,int h,BYTE *pBuffer,int iBytes);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  打印一个图形行
	// 作    者:  邵凯田
	// 创建时间:  2012-10-18 20:44
	// 参数说明:  @w为列数
	//            @pBuffer为图形缓冲区指针，每列24行(点)组成，共3个字节表示一个点
	//            @iBytes为缓冲区字节数，必须为w的3倍
	// 返 回 值:  true/false
	//////////////////////////////////////////////////////////////////////////
	bool PrintGraphicLine(int w,BYTE *pBuffer,int iBytes);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  打印换行符
	// 作    者:  邵凯田
	// 创建时间:  2012-10-17 16:37
	// 参数说明:  void
	// 返 回 值:  true/false
	//////////////////////////////////////////////////////////////////////////
	bool PrintLF();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  打印回车符
	// 作    者:  邵凯田
	// 创建时间:  2012-10-17 16:37
	// 参数说明:  void
	// 返 回 值:  true/false
	//////////////////////////////////////////////////////////////////////////
	bool PrintCR();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  打印并走纸到下页首,将打印缓冲区中的数据全部打印出来并返回标准模式。
	// 作    者:  邵凯田
	// 创建时间:  2012-10-17 16:43
	// 参数说明:  void
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	bool MoveToNextPage();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  打印并走纸到下页首,将打印缓冲区中的数据全部打印出来并返回标准模式。
	// 作    者:  邵凯田
	// 创建时间:  2012-10-17 16:43
	// 参数说明:  @points为垂直点数，一个垂直点距为0.33mm
	// 返 回 值:  true/false
	//////////////////////////////////////////////////////////////////////////
	bool MovePaperPoints(BYTE points);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  打印并进纸lines 行,打印打印缓冲区中的数据并进纸lines字符行
	// 作    者:  邵凯田
	// 创建时间:  2012-10-17 16:43
	// 参数说明:  @lines为进纸的行数
	// 返 回 值:  true/false
	//////////////////////////////////////////////////////////////////////////
	bool MovePaperLines(BYTE lines);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  检查是否缺纸
	// 作    者:  邵凯田
	// 创建时间:  2012-10-24 9:34
	// 参数说明:  void
	// 返 回 值:  true表示不缺纸，false表示缺纸
	//////////////////////////////////////////////////////////////////////////
	bool CheckPaper();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  发出蜂鸣声
	// 作    者:  邵凯田
	// 创建时间:  2012-10-24 10:14
	// 参数说明:  @iTimes表示蜂鸣次数
	//            @iSlp表示两次蜂鸣间的间隔时间，单位毫秒
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void Beep(int iTimes=1,int iSlp=5000);

};

#endif /*__SKT_ESC_PRINT_H_*/
