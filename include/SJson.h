/**
 *
 * 文 件 名 : SJson.h
 * 创建日期 : 2016-9-7 10:51
 * 作    者 : 邵凯田(skt001@163.com)
 * 修改日期 : $Date: $
 * 当前版本 : $Revision: $
 * 功能描述 : JSON读写访问封装类
 * 修改记录 : 
 *            $Log: $
 *
 * Ver  Date        Author  Comments
 * ---  ----------  ------  -------------------------------------------
 * 001	2016-9-7	邵凯田　创建文件
 *
 **/

#ifndef __SJSON_H__
#define __SJSON_H__

#include "SApi.h"
#include "SList.h"

class SBASE_EXPORT SJsonObject
{
public:
	enum SBASE_EXPORT eValueType
	{
		VT_NULL = 0, //'null' value , 如: {"type":null}
		VT_OBJECT,   //object value (collection of name/value pairs).值存储在m_pChildObjects
		VT_ARRAY,    //array value (ordered list),值存储在m_pArrayObjects
		VT_NUMBER,   //double value, 值存储在m_sValue
		VT_BOOL,	 //bool value, 值存储在m_sValue(true/false)
		VT_STRING,   //UTF-8 string value, 值存储在m_sValue
	};

	SJsonObject();
	~SJsonObject();

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  解析JSON文本到当前对象
	// 作    者:  邵凯田
	// 创建时间:  2016-9-7 13:19
	// 参数说明:  pText为JSON全文本,引用变量，解析完成后指针将被指向文本末尾
	// 返 回 值:  true表示解析成功，false表示解析失败
	//////////////////////////////////////////////////////////////////////////
	bool ParseText(char* &pText);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  当前当前变量名称，根节点为空
	// 作    者:  邵凯田
	// 创建时间:  2016-9-7 11:13
	// 参数说明:  void
	// 返 回 值:  SString
	//////////////////////////////////////////////////////////////////////////
	inline SString GetVarName(){return m_sVarName;};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取当前变量的值内容
	// 作    者:  邵凯田
	// 创建时间:  2016-9-7 15:28
	// 参数说明:  void
	// 返 回 值:  SString
	//////////////////////////////////////////////////////////////////////////
	inline SString GetValue(){return m_sValue;};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取当前变量的值类型
	// 作    者:  邵凯田
	// 创建时间:  2016-9-7 15:19
	// 参数说明:  void
	// 返 回 值:  eValueType
	//////////////////////////////////////////////////////////////////////////
	inline eValueType GetValueType(){return m_ValueType;};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取子变量列表指针
	// 作    者:  邵凯田
	// 创建时间:  2016-9-7 11:15
	// 参数说明:  void
	// 返 回 值:  SPtrList<SJsonObject>* , NULL表示没有子变量
	//////////////////////////////////////////////////////////////////////////
	inline SPtrList<SJsonObject>* GetChildObjectsPtr(){return m_pChildObjects;};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取当前变量的子变量数量
	// 作    者:  邵凯田
	// 创建时间:  2016-9-7 13:36
	// 参数说明:  void
	// 返 回 值:  int
	//////////////////////////////////////////////////////////////////////////
	inline int GetChildCount(){return m_pChildObjects==NULL?0:m_pChildObjects->count();};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取第idx个子变量指针
	// 作    者:  邵凯田
	// 创建时间:  2016-9-7 13:38
	// 参数说明:  @idx为变量序号，从0开始
	// 返 回 值:  SJsonObject*, NULL表示未找到
	//////////////////////////////////////////////////////////////////////////
	inline SJsonObject* GetChildObject(int idx){return m_pChildObjects==NULL?NULL:m_pChildObjects->at(idx);};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取指定名称的子变量对象
	// 作    者:  邵凯田
	// 创建时间:  2016-9-7 11:19
	// 参数说明:  @sValueName表示变量名称
	// 返 回 值:  SJsonObject*,NULL表示指定变量不存在
	//////////////////////////////////////////////////////////////////////////
	SJsonObject* operator[](char* sVarName);
	SJsonObject* operator[](SString &sVarName);
	SJsonObject* GetChildObject(char* sVarName);


	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取数组变量列表指针
	// 作    者:  邵凯田
	// 创建时间:  2016-9-7 15:24
	// 参数说明:  void
	// 返 回 值:  SPtrList<SJsonObject>* , NULL表示没有子变量
	//////////////////////////////////////////////////////////////////////////
	inline SPtrList<SJsonObject>* GetArrayObjectsPtr(){return m_pArrayObjects;};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取当前变量的数组数量
	// 作    者:  邵凯田
	// 创建时间:  2016-9-7 11:18
	// 参数说明:  void
	// 返 回 值:  int
	//////////////////////////////////////////////////////////////////////////
	inline int GetArrayCount(){return m_pArrayObjects==NULL?0:m_pArrayObjects->count();};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取指定序号的数组子变量
	// 作    者:  邵凯田
	// 创建时间:  2016-9-7 11:16
	// 参数说明:  @idx为数组子变量的序号，从0开始编号
	// 返 回 值:  SJsonObject*
	//////////////////////////////////////////////////////////////////////////
	SJsonObject* operator[](int idx);
	SJsonObject* GetArrayObject(int idx);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  添加子变量
	// 作    者:  邵凯田
	// 创建时间:  2016-9-7 13:06
	// 参数说明:  @pObj
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void AddChildObject(SJsonObject *pObj);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  添加数组元素到当前变量
	// 作    者:  邵凯田
	// 创建时间:  2016-9-7 13:07
	// 参数说明:  @pObj
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void AddArrayObject(SJsonObject *pObj);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  删除子变量及其下所有子变量和数组元素
	// 作    者:  邵凯田
	// 创建时间:  2016-9-7 13:12
	// 参数说明:  @pObj
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void DeleteChildObject(SJsonObject *pObj);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  删除变量数据元素及其下所有子变量和数组元素
	// 作    者:  邵凯田
	// 创建时间:  2016-9-7 13:13
	// 参数说明:  @pObj
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void DeleteArrayObject(SJsonObject *pObj);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  保存JSON对象的引用的字符串对象
	// 作    者:  邵凯田
	// 创建时间:  2016-9-7 15:47
	// 参数说明:  @sText引用返回的字符串
	//         :  @pObj为等保存的对象指针
	//         :  @level表示缩进级别，外部调用时(0表示正常缩进,-1表示不缩进紧凑文本,紧凑文本不含缩进和换行)
	// 返 回 值:  true表示成功，false表示失败
	//////////////////////////////////////////////////////////////////////////
	bool SaveToString(SString &sText,SJsonObject *pObj,int level);
private:
	//////////////////////////////////////////////////////////////////////////
	// 描    述:  跳过所有空格、回车等无效字符，并将pText移动到第一个有效字符处
	// 作    者:  邵凯田
	// 创建时间:  2016-9-7 14:14
	// 参数说明:  #pText
	// 返 回 值:  char, '\0'表示到了字符串末尾
	//////////////////////////////////////////////////////////////////////////
	char SkipSpaceChar(char* &pText);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  从字符串当前位置读取一个字符串(允许以双引号定界，无定界时以,}]三字符结束)，并将pText移动到字符串末尾
	// 作    者:  邵凯田
	// 创建时间:  2016-9-7 14:08
	// 参数说明:  @pText
	// 返 回 值:  SString，字符串内容，不含引号
	//////////////////////////////////////////////////////////////////////////
	SString ReadString(char* &pText);
private:
	SString m_sVarName;//变量名称，当处于根节点时为空
	SString m_sValue;//变量的字符型值，m_ValueType为NULL、OBJECT、ARRAY时无效
	SPtrList<SJsonObject> *m_pChildObjects;//子对象列表
	SPtrList<SJsonObject> *m_pArrayObjects;//数组对象列表
	eValueType m_ValueType;//值类型
};


#endif//__SJSON_H__
