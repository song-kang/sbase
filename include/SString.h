/**
 *
 * 文 件 名 : SString.h
 * 创建日期 : 2006-09-27
 * 作    者 : 邵凯田(skt001@163.com)
 * 修改日期 : $Date: 2011/08/31 08:43:35 $
 * 当前版本 : $Revision: 1.1 $
 * 功能描述 : a string class just like QString
 * 修改记录 : 
 *            $Log: SString.h,v $
 *            Revision 1.1  2011/08/31 08:43:35  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.2  2011/02/28 01:28:33  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.2  2010/12/20 08:38:28  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.1  2010/08/09 03:04:44  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.2  2010/01/22 01:24:26  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.1  2009/09/15 02:14:09  shaokt
 *            通迅记录分析装置项目首次提交
 *
 *            Revision 1.9  2009/05/19 02:50:38  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.8  2009/01/31 08:06:42  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.7  2009/01/31 06:37:34  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.6  2009/01/06 09:58:18  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.5  2008/12/22 08:54:13  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.4  2008/11/24 04:54:23  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.3  2008/11/08 11:47:15  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.2  2008/09/11 12:12:40  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.1  2008/09/01 11:38:29  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.1  2008/09/01 08:58:03  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.11  2008/02/18 01:07:55  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.10  2007/12/28 00:52:59  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.9  2007/12/10 06:40:28  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.8  2007/10/29 07:30:23  shaokt
 *            添加对象地址是否为4的倍数的检测函数，为检测ARM下由于pack(1)造成的内存问题
 *
 *            Revision 1.7  2007/10/19 11:57:58  shaokt
 *            增加>/>=/</<=的字符串比较函数
 *
 *            Revision 1.6  2007/10/09 11:58:41  shaokt
 *            空指针构造时的BUG
 *
 *            Revision 1.5  2007/09/29 05:13:35  shaokt
 *            属性操作使用引用方式
 *
 *            Revision 1.4  2007/09/21 07:53:01  shaokt
 *            使用缓冲区重写SString,放弃原来使用的std::string类
 *
 *            Revision 1.3  2007/09/18 08:11:50  shaokt
 *            修改float类型的格式化,%0.f->%f
 *
 *            Revision 1.2  2007/08/27 09:51:07  shaokt
 *            基类更新
 *
 *            Revision 1.1  2007/08/15 03:09:22  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.3  2007/05/28 07:33:59  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.2  2006/10/19 02:06:41  tester
 *            修改communicate,xml,ini
 *
 **/

#if !defined(__SKT_STRING_H__)
#define __SKT_STRING_H__

#ifndef _CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <memory.h>
#include <stdarg.h>
#include "SList.h"
#include "SObject.h"

class SString;
//typedef SString QString;
//typedef SString QCString;
//typedef SString SString;
typedef SClassList<SString> SStringList;
//typedef SStringList QStringList;

typedef unsigned long UTF32;
typedef unsigned short UTF16;
typedef unsigned char UTF8;
#define UTF8_ONE_START (0x0001)
#define UTF8_ONE_END (0x0007f)
#define UTF8_TWO_START (0x0080)
#define UTF8_TWO_END (0x07ff)
#define UTF8_THERE_START (0x0800)
#define UTF8_THERE_END (0xffff)

#ifndef WIN32
#include <iconv.h>

int  SBASE_EXPORT StringCharsetConvert2(const char* from_charset,const char* to_charset,char* inbuf,int inlen,char* outbuf,int outlen);
//////////////////////////////////////////////////////////////////////////
// 名    称:  CodeConverter
// 作    者:  邵凯田
// 创建时间:  2011-11-24 12:51
// 描    述:  代码转换操作类
//////////////////////////////////////////////////////////////////////////
/*
class CodeConverter
{
private:
	iconv_t cd;
public:
	// 构造
	CodeConverter(const char *from_charset,const char *to_charset) 
	{
		cd = iconv_open(to_charset,from_charset);
	}
	
	// 析构
	~CodeConverter()
	{
		iconv_close(cd);
	}
	
	// 转换输出
	int convert(char *inbuf,int inlen,char *outbuf,int outlen)
	{
		char **pin = &inbuf;
		char **pout = &outbuf;
		
		memset(outbuf,0,outlen);
		int ret = iconv(cd,pin,(size_t *)&inlen,pout,(size_t *)&outlen);
		if(ret == -1)
		{
			printf("iconv error! errno=%d, src=%s, desc=%s\n",errno,inbuf,outbuf);
			//errtimes++;
		}
		return ret;
	}
};
*/
#endif

//////////////////////////////////////////////////////////////////////////
// 名    称:  SString
// 作    者:  邵凯田
// 创建时间:  2011-11-24 12:57
// 描    述:  字符串类
//////////////////////////////////////////////////////////////////////////
class SBASE_EXPORT SString 
{
public:
	SString();
	SString(int size);
	SString(const char *pStr);
	SString(const SString &str);
	SString(const std::string &str);
	virtual ~SString();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  字符串是否为空
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 11:59
	// 参数说明:  void
	// 返 回 值:  true表示为空，false表示不为空
	//////////////////////////////////////////////////////////////////////////
	bool isEmpty() const;

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取指定的char*字符缓冲区指针
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 12:00
	// 参数说明:  void
	// 返 回 值:  char*
	//////////////////////////////////////////////////////////////////////////
	char* data()  const;

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取第index个字符
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 12:57
	// 参数说明:  @index
	// 返 回 值:  char
	//////////////////////////////////////////////////////////////////////////
	char at(int index) const;

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取子字符串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:04
	// 参数说明:  @beg为开始位置，从0开始
	//            @len为长度，不填此字段时表示取到字符串末尾
	// 返 回 值:  子串
	//////////////////////////////////////////////////////////////////////////
	SString substr(int beg,int len=-1);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取字符串长度
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:05
	// 参数说明:  void
	// 返 回 值:  长度
	//////////////////////////////////////////////////////////////////////////
	int length() const;

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取字符串长度
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:05
	// 参数说明:  void
	// 返 回 值:  长度
	//////////////////////////////////////////////////////////////////////////
	int size() {return length();};

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取字符串长度
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:05
	// 参数说明:  void
	// 返 回 值:  长度
	//////////////////////////////////////////////////////////////////////////
	int count() {return size();};

	////////////////////////////////////////////////////////////////////////
	// 描    述:  设置缓冲区大小
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:06
	// 参数说明:  @size为新的大小
	// 返 回 值:  true表示设置成功，false表示新大小小于目前的字符串长度+1时返回错误
	//////////////////////////////////////////////////////////////////////////
	bool SetBuffer(int size);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  根据字符串缓冲区长度重新计算字符串大小，仅在外部修改字符缓冲内容后使用
	// 作    者:  邵凯田
	// 创建时间:  2013-3-6 9:16
	// 参数说明:  void
	// 返 回 值:  返回当前字符串真实长度，并修改m_iStrLen
	//////////////////////////////////////////////////////////////////////////
	int PrepareStrLen();

	//以下函数用于兼容MFC的SString接口
	////////////////////////////////////////////////////////////////////////
	// 描    述:  取指定的char*字符缓冲区指针，兼容MFC的SString用
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 12:00
	// 参数说明:  @size不使用
	// 返 回 值:  char*
	//////////////////////////////////////////////////////////////////////////
	inline char* GetBuffer(int size=0){S_UNUSED(size);return data();};

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取字符串长度
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:13
	// 参数说明:  void
	// 返 回 值:  int
	//////////////////////////////////////////////////////////////////////////
	inline int GetLength(){return length();};

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取左子串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:14
	// 参数说明:  @i为长度
	// 返 回 值:  左子串
	//////////////////////////////////////////////////////////////////////////
	inline SString Left(int i){return left(i);};

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取右子串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:14
	// 参数说明:  @i为长度
	// 返 回 值:  右子串
	//////////////////////////////////////////////////////////////////////////
	inline SString Right(int i){return right(i);};

	////////////////////////////////////////////////////////////////////////
	// 描    述:  查找子串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:14
	// 参数说明:  @s为子串内容
	//            @i为起始的查找位置,i从0开始
	// 返 回 值:  >=0表示子串的位置，<0表示未找到
	//////////////////////////////////////////////////////////////////////////
	inline int Find(SString s,int i=0){return find(s,i);};

	////////////////////////////////////////////////////////////////////////
	// 描    述:  查找子串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:14
	// 参数说明:  @s为子串内容
	//            @i为起始的查找位置,i从0开始
	// 返 回 值:  >=0表示子串的位置，<0表示未找到
	//////////////////////////////////////////////////////////////////////////
	inline int Find(char s,int i=0){SString str;str+=s;return find(str,i);};

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取子串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:16
	// 参数说明:  @i为起始位置,从0开始
	//            @len为长度，缺省为到字符串末尾
	// 返 回 值:  子串
	//////////////////////////////////////////////////////////////////////////
	inline SString Mid(int i,int len=-1){return mid(i,len);};

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取第i个字符
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:16
	// 参数说明:  @i为待取字符的位置，从0开始
	// 返 回 值:  char
	//////////////////////////////////////////////////////////////////////////
	inline char GetAt(int i){return at(i);};

	////////////////////////////////////////////////////////////////////////
	// 描    述:  大小写不敏感的字符串比较
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:17
	// 参数说明:  @substr为子串内容
	// 返 回 值:  >=0表示子串出现位置，<0表示子串未找到
	//////////////////////////////////////////////////////////////////////////
	inline int CompareNoCase(SString substr){return compareNoCase(substr);};

	////////////////////////////////////////////////////////////////////////
	// 描    述:  填充一个整数到指定长度的字符串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:24
	// 参数说明:  @a为给定的整数值
	//            @fieldWidth为期望的字符串长度，>0表示不足是在左边补齐，<0则是在右边补齐
	//            @base为进制数，固定为10
	//            @fillChar为填充的字符
	// 返 回 值:  字符串
	//////////////////////////////////////////////////////////////////////////
	SString arg(int a, int fieldWidth = 0, int base = 10, char fillChar=' ');

	////////////////////////////////////////////////////////////////////////
	// 描    述:  清空字符串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:27
	// 参数说明:  void
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void clear();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  字符串比较
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:29
	// 参数说明:  @被比较的字符串
	// 返 回 值:  <0表示当前串小于str,=0表示当前串等于str,>0表示当前串大于str
	//////////////////////////////////////////////////////////////////////////
	int compare(const SString &str);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  比较两个字符串是否完全相等
	// 作    者:  邵凯田
	// 创建时间:  2015-10-27 13:30
	// 参数说明:  @s1为字符串1
	//         :  @s2为字符串2
	// 返 回 值:  true/false
	//////////////////////////////////////////////////////////////////////////
	static bool equals(const char* s1,const char* s2);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  返回安全字符串，安输入为NULL时，返回空字符串,否则返回输入串
	// 作    者:  邵凯田
	// 创建时间:  2015-12-25 10:38
	// 参数说明:  
	// 返 回 值:  
	//////////////////////////////////////////////////////////////////////////
	static char* safeChar(const char* str);


	////////////////////////////////////////////////////////////////////////
	// 描    述:  字符串大小写不敏感比较
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:29
	// 参数说明:  @被比较的字符串
	// 返 回 值:  <0表示当前串小于str,=0表示当前串等于str,>0表示当前串大于str
	//////////////////////////////////////////////////////////////////////////
	int compareNoCase(const SString &str);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  查找字符
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:31
	// 参数说明:  @c为目标字符
	//            @i为起始位置，从0开始
	//            @cs是否大小写敏感
	// 返 回 值:  >=0表示子串位置，<0表示未找到
	//////////////////////////////////////////////////////////////////////////
	int find(char c, int i = 0, bool cs = true);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  查找字符
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:31
	// 参数说明:  @c为目标字符
	//            @i为起始位置，从0开始
	//            @cs是否大小写敏感
	// 返 回 值:  >=0表示子串位置，<0表示未找到
	//////////////////////////////////////////////////////////////////////////
	int find(SString s, int i = 0, bool cs = true);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  反向查找字符
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:31
	// 参数说明:  @c为目标字符
	//            @i为起始位置，从0开始，表示反向查找的截止位置
	//            @cs是否大小写敏感
	// 返 回 值:  >=0表示子串位置，<0表示未找到
	//////////////////////////////////////////////////////////////////////////
	int findRev(char c, int i = -1, bool cs = true);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  反向查找字符
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:31
	// 参数说明:  @c为目标字符
	//            @i为起始位置，从0开始
	//            @cs是否大小写敏感
	// 返 回 值:  >=0表示子串位置，<0表示未找到
	//////////////////////////////////////////////////////////////////////////
	int findRev(SString s, int i = -1, bool cs = true);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  赋值运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:33
	// 参数说明:  @c字符
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	SString &operator=(char c);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  赋值运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:33
	// 参数说明:  @c字符
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	SString &operator=(char* s)
	{
		SString str(s==NULL?"":s);
		*this = str;
		return *this;
	}
	SString &operator=(const char* s)
	{
		SString str(s == NULL ? "" : s);
		*this = str;
		return *this;
	}


#if defined(UNICODE) && defined(WIN32)
	SString &operator=(WCHAR* s)
	{
		return operator=((char*)s);
	}
#endif

	////////////////////////////////////////////////////////////////////////
	// 描    述:  指针运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:33
	// 参数说明:  @c字符
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	operator const char * () const
	{
		return data();
	}  

	////////////////////////////////////////////////////////////////////////
	// 描    述:  下标运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:33
	// 参数说明:  @c字符
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	char operator[](int index) const
	{
		return at(index);
	}
	////////////////////////////////////////////////////////////////////////
	// 描    述:  设置字符串内容
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:34
	// 参数说明:  @pStr为新字符串
	//         :  @len为新字符中长度，-1表示字符串全长
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void SetString(const char *pStr,int len=-1);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  收缩字符串，释放多余的缓冲区
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:36
	// 参数说明:  void
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void FreeExtra();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  赋值运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:33
	// 参数说明:  @s字符
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	SString &operator=(const SString &s);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  比较运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:37
	// 参数说明:  @s字符串
	// 返 回 值:  true表示相等，false表示不相等
	//////////////////////////////////////////////////////////////////////////
	bool operator==(const SString &s);	

	////////////////////////////////////////////////////////////////////////
	// 描    述:  比较运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:37
	// 参数说明:  @s字符串
	// 返 回 值:  true表示相等，false表示不相等
	//////////////////////////////////////////////////////////////////////////
	bool operator==(const char *s);

	//compare

	////////////////////////////////////////////////////////////////////////
	// 描    述:  比较运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:37
	// 参数说明:  @s字符串
	// 返 回 值:  true表示当前字符串大于s
	//////////////////////////////////////////////////////////////////////////
	bool operator>(const char *s);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  比较运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:37
	// 参数说明:  @s字符串
	// 返 回 值:  true表示当前字符串大于等于s
	//////////////////////////////////////////////////////////////////////////
	bool operator>=(const char *s);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  比较运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:37
	// 参数说明:  @s字符串
	// 返 回 值:  true表示当前字符串小于s
	//////////////////////////////////////////////////////////////////////////
	bool operator<(const char *s);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  比较运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:37
	// 参数说明:  @s字符串
	// 返 回 值:  true表示当前字符串小于等于s
	//////////////////////////////////////////////////////////////////////////
	bool operator<=(const char *s);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  比较运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:37
	// 参数说明:  @s字符串
	// 返 回 值:  true表示当前字符串大于s
	//////////////////////////////////////////////////////////////////////////
	bool operator>(const SString &s);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  比较运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:37
	// 参数说明:  @s字符串
	// 返 回 值:  true表示当前字符串大于等于s
	//////////////////////////////////////////////////////////////////////////
	bool operator>=(const SString &s);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  比较运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:37
	// 参数说明:  @s字符串
	// 返 回 值:  true表示当前字符串小于s
	//////////////////////////////////////////////////////////////////////////
	bool operator<(const SString &s);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  比较运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:37
	// 参数说明:  @s字符串
	// 返 回 值:  true表示当前字符串小于等于s
	//////////////////////////////////////////////////////////////////////////
	bool operator<=(const SString &s);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  比较运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:37
	// 参数说明:  @s字符串
	// 返 回 值:  true表示当前字符串不等于s
	//////////////////////////////////////////////////////////////////////////
	bool operator!=(const SString &s);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  比较运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:37
	// 参数说明:  @s字符串
	// 返 回 值:  true表示当前字符串不等于s
	//////////////////////////////////////////////////////////////////////////
	bool operator!=(const char *s);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  加运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:37
	// 参数说明:  @s字符串
	// 返 回 值:  新字符串
	//////////////////////////////////////////////////////////////////////////
	SString operator+(const SString &s);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  加运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:37
	// 参数说明:  @s字符串
	// 返 回 值:  新字符串
	//////////////////////////////////////////////////////////////////////////
	SString operator+(char c);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  加运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:37
	// 参数说明:  @s字符串
	// 返 回 值:  新字符串
	//////////////////////////////////////////////////////////////////////////
	SString operator+(char *s) ;
	SString operator+(const char *s);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  加并赋值运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:37
	// 参数说明:  @c字符串
	// 返 回 值:  新字符串
	//////////////////////////////////////////////////////////////////////////
	SString & operator+=( char c );

	////////////////////////////////////////////////////////////////////////
	// 描    述:  加并赋值运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:37
	// 参数说明:  @str字符串
	// 返 回 值:  新字符串
	//////////////////////////////////////////////////////////////////////////
	SString & operator+=( const char * str );
#if defined(UNICODE) && defined(WIN32)
	SString & operator+=( const WCHAR * str )
	{
		return operator+=((char*)str);
	}
#endif
	////////////////////////////////////////////////////////////////////////
	// 描    述:  加并赋值运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:37
	// 参数说明:  @str字符串
	// 返 回 值:  新字符串
	//////////////////////////////////////////////////////////////////////////
	SString & operator+=( char *str );

	////////////////////////////////////////////////////////////////////////
	// 描    述:  加并赋值运算符重载
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:37
	// 参数说明:  @str字符串
	// 返 回 值:  新字符串
	//////////////////////////////////////////////////////////////////////////
	SString & operator+=( const SString & other );
	
	////////////////////////////////////////////////////////////////////////
	// 描    述:  取左子串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:40
	// 参数说明:  @len表示左子串长度
	// 返 回 值:  子串
	//////////////////////////////////////////////////////////////////////////
	SString left(int len);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取右子串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:41
	// 参数说明:  @len表示右子串长度
	// 返 回 值:  子串
	//////////////////////////////////////////////////////////////////////////
	SString right(int len);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取中间子串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:41
	// 参数说明:  @i为开始位置
	//            @len为长度，缺省为到字符串末尾
	// 返 回 值:  子串
	//////////////////////////////////////////////////////////////////////////
	SString mid(int i, int len = -1);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  字符串替换
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:42
	// 参数说明:  @pos为待替换的起始位置
	//            @len为待替换的长度
	//            @s为新子串内容
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	SString replace ( int pos, int len, const SString & s );

	////////////////////////////////////////////////////////////////////////
	// 描    述:  字符串替换
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:42
	// 参数说明:  @pos为待替换的起始位置
	//            @len为待替换的长度
	//            @str为新子串内容
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	SString replace ( int pos, int len, const char * str);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  字符串替换
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:42
	// 参数说明:  @pos为待替换的起始位置
	//            @len为待替换的长度
	//            @c为新子串内容
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	SString replace ( int pos, int len, char c );

	////////////////////////////////////////////////////////////////////////
	// 描    述:  字符串替换
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:44
	// 参数说明:  @before表示待替换的子串
	//            @after表示替换后的新子串
	//            @cs表示大小写是否敏感
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	SString replace ( const SString &before, const SString &after, bool cs=true);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  字符串替换
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:44
	// 参数说明:  @before表示待替换的子串
	//            @after表示替换后的新子串
	//            @cs表示大小写是否敏感
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	SString replace (const char *before,const char *after, bool cs=true);
	inline SString replace (SString before,const char *after, bool cs=true)
	{
		return replace(before.data(),after,cs);
	}
	inline SString replace (const char* before,SString after, bool cs=true)
	{
		return replace(before,after.data(),cs);
	}

	////////////////////////////////////////////////////////////////////////
	// 描    述:  格式化字符串,必须确保格式化后的字符串长度小于10240字节，否则将造成异常
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:45
	// 参数说明:  ...
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	SString& sprintf(const char * cformat, ...);
	
	////////////////////////////////////////////////////////////////////////
	// 描    述:  将当前字符串中字母全部转换大写
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:45
	// 参数说明:  void
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	SString toUpper();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  将当前字符串中字母全部转换成小写
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:46
	// 参数说明:  void
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	SString toLower();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  将当前字符串转换为short整数
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:46
	// 参数说明:  @ok未使用
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	short toShort(bool * ok=0);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  将当前字符串转换为int整数
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:46
	// 参数说明:  @ok未使用
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	int toInt(bool * ok=0);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  将当前字符串转换为long整数
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:46
	// 参数说明:  @ok未使用
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	long toLong(bool * ok=0);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  将当前字符串转换为ushort整数
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:46
	// 参数说明:  @ok未使用
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	unsigned short toUShort(bool * ok=0);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  将当前字符串转换为uint整数
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:46
	// 参数说明:  @ok未使用
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	unsigned int toUInt(bool * ok=0);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  将当前字符串转换为ulong整数
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:46
	// 参数说明:  @ok未使用
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	unsigned long toULong(bool * ok=0);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  将当前字符串转换为float浮点数
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:46
	// 参数说明:  @ok未使用
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	float toFloat(bool *ok=0);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  将当前字符串转换为double双精度数
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:46
	// 参数说明:  @ok未使用
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	double toDouble(bool *ok=0);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  将当前字符串中字母全部转换大写
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:45
	// 参数说明:  void
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	SString upper();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  将当前字符串中字母全部转换小写
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:45
	// 参数说明:  void
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	SString lower();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  去除当前字符串前后的空格、制表、回车、换行符
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:49
	// 参数说明:  void
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	SString stripWhiteSpace();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  去除当前字符串前后的空格、制表、回车、换行符
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:49
	// 参数说明:  void
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	inline SString trim()
	{
		return stripWhiteSpace();
	}

	////////////////////////////////////////////////////////////////////////
	// 描    述:  填充当前字符串为size个ch字符
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:45
	// 参数说明:  void
	// 返 回 值:  *this
	//////////////////////////////////////////////////////////////////////////
	SString fill(char ch, int size=-1);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取当前字符串的前size个字符，同left/Left函数
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:51
	// 参数说明:  @size长度
	// 返 回 值:  新的字符串
	//////////////////////////////////////////////////////////////////////////
	SString limit(int size);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  格式化字符串,必须确保格式化后的字符串长度小于10240字节，否则将造成异常
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:45
	// 参数说明:  ...
	// 返 回 值:  SString
	//////////////////////////////////////////////////////////////////////////
	static SString toFormat(const char * cformat, ...);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  指定目标缓冲长度的字符串复制
	// 作    者:  邵凯田
	// 创建时间:  2015-11-6 16:04
	// 参数说明:  @sDst为目标字符串
	//         :  @iMaxDstLen目标字符串缓冲区长度，含'\0'位置
	//         :  @sSrc为源字符中
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	static void strncpy(char* sDst, int iMaxDstLen, const char* sSrc);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  跳过所有的空格、制表符、回车、换行
	// 作    者:  邵凯田
	// 创建时间:  2016-10-29 9:50
	// 参数说明:  @pStr为源字符串
	// 返 回 值:  char* 表示新字符串，在pStr指针之后，为pStr的子串
	//////////////////////////////////////////////////////////////////////////
	static char* SkipSpaceChar(char *pStr);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  转换long为字符串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:52
	// 参数说明:  @v为数值
	//            @sen为进制数，支持10进制和16进制
	// 返 回 值:  新的字符串
	//////////////////////////////////////////////////////////////////////////
	static SString toString(long v,int sen=10);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  将当前指定的字符串设为指定的长度
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:53
	// 参数说明:  @str源字符串
	//            @len为新串长度
	//            @chFill为填充字符
	//            @bAddAtleft为true表示在左边填充，false表示右边填充
	// 返 回 值:  新字符串
	//////////////////////////////////////////////////////////////////////////
	static SString toFillString(SString str,int len,char chFill=' ',bool bAddAtLeft=true);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  转换int为字符串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:52
	// 参数说明:  @v为数值
	//            @sen为进制数，支持10进制和16进制
	// 返 回 值:  新的字符串
	//////////////////////////////////////////////////////////////////////////
	static SString toString(int v,int sen=10);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  从缓冲区创建字符串，当不确认字符缓冲区内是否有结束符时使用该函数指定长度
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:54
	// 参数说明:  @pStr为字符缓冲区
	//            @iLength为长度
	// 返 回 值:  新的字符串
	//////////////////////////////////////////////////////////////////////////
	static SString toString(const char* pStr,int iLength);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  转换uchar为字符串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:52
	// 参数说明:  @v为数值
	//            @sen为进制数，支持10进制和16进制
	// 返 回 值:  新的字符串
	//////////////////////////////////////////////////////////////////////////
	static SString toString(unsigned char v);
	
	////////////////////////////////////////////////////////////////////////
	// 描    述:  转换short为字符串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:52
	// 参数说明:  @v为数值
	//            @sen为进制数，支持10进制和16进制
	// 返 回 值:  新的字符串
	//////////////////////////////////////////////////////////////////////////
	static SString toString(short v);
	
	////////////////////////////////////////////////////////////////////////
	// 描    述:  转换float为字符串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:52
	// 参数说明:  @v为数值
	//            @sen为进制数，支持10进制和16进制
	// 返 回 值:  新的字符串
	//////////////////////////////////////////////////////////////////////////
	static SString toString(float v,int d=-1);
	
	////////////////////////////////////////////////////////////////////////
	// 描    述:  转换double为字符串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:52
	// 参数说明:  @v为数值
	//            @sen为进制数，支持10进制和16进制
	// 返 回 值:  新的字符串
	//////////////////////////////////////////////////////////////////////////
	static SString toString(double v,int d=-1);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  转换指定字符串为int
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:52
	// 参数说明:  @str为指定的字符串
	// 返 回 值:  int
	//////////////////////////////////////////////////////////////////////////
	static int toInt(SString str);

#ifdef WIN32
	static __int64 toInt64(char* str)
	{
		return _atoi64(str);
	}
#else
	#include <stdlib.h>
	static long long toInt64(char* str)
	{
		return atoll(str);
	}
#endif

	////////////////////////////////////////////////////////////////////////
	// 描    述:  转换指定字符串为float
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:52
	// 参数说明:  @str为指定的字符串
	// 返 回 值:  float
	//////////////////////////////////////////////////////////////////////////
	static float toFloat(SString str);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  转换指定字符串为double
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:52
	// 参数说明:  @str为指定的字符串
	// 返 回 值:  double
	//////////////////////////////////////////////////////////////////////////
	static double toDouble(SString str);
	
	////////////////////////////////////////////////////////////////////////
	// 描    述:  将字节数（含G字节）转换为字符串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 13:57
	// 参数说明:  @bytes为字节数
	//            @gbytes为G字节数(1024*1024*1024)
	// 返 回 值:  新字符串
	//////////////////////////////////////////////////////////////////////////
	static SString toBytesString(int bytes,int gbytes=0);
	
	////////////////////////////////////////////////////////////////////////
	// 描    述:  将给定的字符串形式的16进制数转换成BYTE缓冲区
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 14:03
	// 参数说明:  @str为16进制表示的数，各字节中间无分隔符，每个字节占两个字符
	//            @pHex为目标缓冲区
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	static void StrToHex(SString str,unsigned char *pHex);
	static void StrToHex(char* str,int str_len,unsigned char *pHex);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  将指定的16进制缓冲区内容转换成字符串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 14:05
	// 参数说明:  @pHex为缓冲区内容
	//            @iBytes为字节数
	//            @bSpace为各字节间是否带空格
	//            @iMaxBytes表示最大处理的字节数，0表示不限制
	// 返 回 值:  新的字符串，每个字节占两个字符，如bSpace为true再加一个空格符
	//////////////////////////////////////////////////////////////////////////
	static SString HexToStr(unsigned char *pHex,int iBytes,bool bSpace=true,int iMaxBytes=0);
	static SString HexToStr(void *pHex, int iBytes, bool bSpace = true,int iMaxBytes=0)
	{
		return HexToStr((unsigned char*)pHex, iBytes, bSpace,iMaxBytes);
	}

	////////////////////////////////////////////////////////////////////////
	// 描    述:  将指定的MAC地址字符串转换为6个字节缓冲区(00:00:00:00:00:00或00-00-00-00-00-00)
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 14:07
	// 参数说明:  @str为源字符串形式MAC地址
	//            @pHex为MAC地址的存放缓冲区，6字节
	// 返 回 值:  true表示转换成功，false表示失败
	//////////////////////////////////////////////////////////////////////////
	static bool MacStrToHex(SString str,unsigned char *pHex);

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  将16进制的MAC地址转换成字符串
	// 作    者:  邵凯田
	// 创建时间:  2013-2-27 17:38
	// 参数说明:  @pMacByte为MAC地址
	//            @pHexStr为字符串缓冲区，必须空间大于等于18个字符
	//            @ch为间隔符，缺省为':'
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	static void MacHexToStr(BYTE *pMacByte,char *pHexStr,char ch=':');

	////////////////////////////////////////////////////////////////////////
	// 描    述:  将当前字符缓冲区中GB字符串转换为UTF-8编码
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 14:10
	// 参数说明:  @pIn为原字符
	// 返 回 值:  新字符串
	//////////////////////////////////////////////////////////////////////////
	static SString Gb2Utf8(char *pIn);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  将当前字符缓冲区中UTF-8字符串转换为GB编码
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 14:10
	// 参数说明:  @pIn为原字符
	// 返 回 值:  新字符串
	//////////////////////////////////////////////////////////////////////////
	static SString Utf82Gb(char *pIn);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  在指定的字符缓冲区内转换UTF-8编码为GB编码
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 14:34
	// 参数说明:  @pIn为原字符
	//            @iSize为长度
	// 返 回 值:  true表示转换成功，false表示失败
	//////////////////////////////////////////////////////////////////////////
	static bool Utf82Gb(char *pIn,int iSize);


	//////////////////////////////////////////////////////////////////////////
	// 描    述:  将UTF16字符转换为UTF8
	// 作    者:  邵凯田
	// 创建时间:  2012-12-19 13:41
	// 参数说明:  @pUTF16Start源UTF16开始位置,
	//            @pUTF16End源UTF16结束位置,
	//            @pUTF8Start目标UTF8缓冲区开始位置，
	//            @pUTF8End目标UTF8缓冲区结束位置，UTF缓冲区应为UTF16缓冲区大小的两倍
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	static void Utf16_to_Utf8(UTF16* pUTF16Start,UTF16* pUTF16End,UTF8* pUTF8Start,UTF8* pUTF8End);


	////////////////////////////////////////////////////////////////////////
	// 描    述:  当前字符串转换为新的UTF-8编码的字符串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 14:35
	// 参数说明:  void
	// 返 回 值:  新字符串
	//////////////////////////////////////////////////////////////////////////
	SString toUtf8();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  当前字符串转换为新的GB编码的字符串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 14:35
	// 参数说明:  void
	// 返 回 值:  新字符串
	//////////////////////////////////////////////////////////////////////////
	SString toGb2312();
		
	/************************************************************************/
	/* 属性串操作                                                           */
	/************************************************************************/

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  读取字符串到指定的字符
	// 作    者:  邵凯田
	// 创建时间:  2012-3-14 12:54
	// 参数说明:  @pSrcStr为源字符串，读取一次后将自动向后移动到停止字符串之后
	//            @sStopChar为停止字符串
	//            @sResult为结果字符串
	// 返 回 值:  true表示找到，false表示找不到
	static bool ReadToChar(char* &pSrcStr,char *sStopChar,SString &sResult);


	////////////////////////////////////////////////////////////////////////
	// 描    述:  取指定分隔字符串中的第index个子串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 14:40
	// 参数说明:  @index为子串序号，从1开始编号
	//            @sAttr为字符串
	//            @chSep为分隔字符
	// 返 回 值:  子串内容
	//////////////////////////////////////////////////////////////////////////
	static SString GetIdAttribute(int index,SString &sAttr,SString chSep=";");

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取指定分隔字符串中的第index个子串,并转换为int返回
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 14:40
	// 参数说明:  @index为子串序号，从1开始编号
	//            @sAttr为字符串
	//            @chSep为分隔字符
	// 返 回 值:  int
	//////////////////////////////////////////////////////////////////////////
	static int GetIdAttributeI(int index,SString &sAttr,SString chSep=";");

#ifdef WIN32
	static __int64 GetIdAttributeI64(int index,SString &sAttr,SString chSep=";");
#else
	static long long GetIdAttributeI64(int index,SString &sAttr,SString chSep=";");
#endif

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取指定分隔字符串中的第index个子串,并转换为float返回
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 14:40
	// 参数说明:  @index为子串序号，从1开始编号
	//            @sAttr为字符串
	//            @chSep为分隔字符
	// 返 回 值:  float
	//////////////////////////////////////////////////////////////////////////
	static float GetIdAttributeF(int index,SString &sAttr,SString chSep=";");

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取子字符串的个数
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 14:50
	// 参数说明:  @sAttr为字符串
	//            @chSep为分隔字符
	// 返 回 值:  数量
	//////////////////////////////////////////////////////////////////////////
	static int GetAttributeCount(SString &sAttr,SString chSep=";");

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取属性值name1=value1;name2=value2;
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 14:50
	// 参数说明:  @sAttr为属性字符串，如：name1=value1;name2=value2;
	//            @sName为属性名称
	//            @chEqual为等于号字符，缺省为"=",也可以是多个字符
	//            @chSep分隔符内容，缺省为";",也可以是多个字符
	// 返 回 值:  属性值
	//////////////////////////////////////////////////////////////////////////
	static SString GetAttributeValue(SString &sAttr,SString sName,SString chEqual="=",SString chSep=";");

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  设置属性值name1=value1;name2=vale2;，如果属性存在则修改，不存在则添加
	// 作    者:  邵凯田
	// 创建时间:  2015-11-16 9:11
	// 参数说明:  @sAttr为属性字符串，如：name1=value1;name2=value2;，引用返回
	//            @sName为属性名称
	//         :  @sValue为新的属性值
	//            @chEqual为等于号字符，缺省为"=",也可以是多个字符
	//            @chSep分隔符内容，缺省为";",也可以是多个字符
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	static void SetAttributeValue(SString &sAttr,SString sName,SString sValue,SString chEqual="=",SString chSep=";");
	static void SetAttributeValueI(SString &sAttr,SString sName,int iValue,SString chEqual="=",SString chSep=";");
	static void SetAttributeValueF(SString &sAttr,SString sName,float fValue,SString chEqual="=",SString chSep=";");

	////////////////////////////////////////////////////////////////////////
	// 描    述:  当前属性名是否存在
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 14:50
	// 参数说明:  @sAttr为属性字符串，如：name1=value1;name2=value2;
	//            @sName为属性名称
	//            @chEqual为等于号字符，缺省为"=",也可以是多个字符
	//            @chSep分隔符内容，缺省为";",也可以是多个字符
	// 返 回 值:  true表示存在
	//////////////////////////////////////////////////////////////////////////
	static bool IsAttribute(SString &sAttr,SString sName,SString chEqual="=",SString chSep=";");

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取属性值并转换为int
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 14:50
	// 参数说明:  @sAttr为属性字符串，如：name1=value1;name2=value2;
	//            @sName为属性名称
	//            @chEqual为等于号字符，缺省为"=",也可以是多个字符
	//            @chSep分隔符内容，缺省为";",也可以是多个字符
	// 返 回 值:  int
	//////////////////////////////////////////////////////////////////////////
	static int GetAttributeValueI(SString &sAttr,SString sName,SString chEqual="=",SString chSep=";");

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取属性值并转换成float
	// 作    者:  邵凯田
	// 创建时间:  2011-11-24 14:50
	// 参数说明:  @sAttr为属性字符串，如：name1=value1;name2=value2;
	//            @sName为属性名称
	//            @chEqual为等于号字符，缺省为"=",也可以是多个字符
	//            @chSep分隔符内容，缺省为";",也可以是多个字符
	// 返 回 值:  float
	//////////////////////////////////////////////////////////////////////////
	static float GetAttributeValueF(SString &sAttr,SString sName,SString chEqual="=",SString chSep=";");

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取字符串缓冲区大小
	// 作    者:  邵凯田
	// 创建时间:  2014:1:21 15:28
	// 参数说明:  
	// 返 回 值:  
	//////////////////////////////////////////////////////////////////////////
	inline int GetBufferSize(){return m_iSize;};
private:
	char *m_pStr;//指向字符串
	int m_iSize;//缓冲区大小，含char(0)
	int m_iStrLen;//字符串长度
};

////////////////////////////////////////////////////////////////////////
// 描    述:  字符串相加运算符重载
// 作    者:  邵凯田
// 创建时间:  2011-11-24 14:38
// 参数说明:  @s1为字符串1
//            @s2为字符串2 
// 返 回 值:  新的连接后的字符串
//////////////////////////////////////////////////////////////////////////
inline const SBASE_EXPORT SString operator+(const SString &s1, const SString &s2)
{
	SString s=s1;
	s+=s2;
	return s;
};

#endif // !defined(__SKT_STRING_H__)
