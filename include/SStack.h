/**
 *
 * 文 件 名 : SStack.h
 * 创建日期 : 2015-4-8 10:29
 * 作    者 : 邵凯田(skt001@163.com)
 * 修改日期 : $Date: $
 * 当前版本 : $Revision: $
 * 功能描述 : 栈的模板类实现，未进行多线程并发串行化处理（如应用并发则自行处理串行化）
 * 修改记录 : 
 *            $Log: $
 *
 * Ver  Date        Author  Comments
 * ---  ----------  ------  -------------------------------------------
 * 001	2015-4-8	邵凯田　创建文件
 *
 **/

#ifndef __SKT_STACK_TMPL_H__
#define __SKT_STACK_TMPL_H__

//////////////////////////////////////////////////////////////////////////
// 名    称:  SValueStack
// 作    者:  邵凯田
// 创建时间:  2015-4-8 10:52
// 描    述:  面向对象/值的栈模板，如果使用对象实例化则对象类必须实现‘=’运算符的重载
//////////////////////////////////////////////////////////////////////////
template<class T,int STACK_SIZE>
class SBASE_EXPORT SValueStack
{
public:
	SValueStack()
	{
		m_iTopPtr = -1;
		m_iMaxPtr = STACK_SIZE - 1;
	}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  入栈
	// 作    者:  邵凯田
	// 创建时间:  2015-4-8 10:54
	// 参数说明:  @a表示待入栈的值引用
	// 返 回 值:  true表示入栈成功，false表示栈溢出
	//////////////////////////////////////////////////////////////////////////
	bool push(T &a)
	{
		if(m_iTopPtr < m_iMaxPtr)
		{
			m_Stack[m_iTopPtr++] = a;
			return true;
		}
		else
			return false;
	}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  出栈
	// 作    者:  邵凯田
	// 创建时间:  2015-4-8 10:56
	// 参数说明:  @pa表示将栈顶节点弹出
	// 返 回 值:  true表示成功出栈，false表示栈为空
	//////////////////////////////////////////////////////////////////////////
	bool pop(T *pa)
	{
		if(m_iTopPtr < 0)
			return false;
		*pa = m_Stack[m_iTopPtr--];
		return true;
	}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  是否栈为空
	// 作    者:  邵凯田
	// 创建时间:  2015-4-8 10:57
	// 参数说明:  void
	// 返 回 值:  true表示为空，false表示非空
	//////////////////////////////////////////////////////////////////////////
	bool is_empty()
	{
		return (m_iTopPtr == -1);
	}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取当前栈的大小
	// 作    者:  邵凯田
	// 创建时间:  2015-4-8 11:11
	// 参数说明:  void
	// 返 回 值:  int，0表示栈为空
	//////////////////////////////////////////////////////////////////////////
	int size()
	{
		return m_iTopPtr+1;
	}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取指定位置的栈内容
	// 作    者:  邵凯田
	// 创建时间:  2015-4-8 11:12
	// 参数说明:  @i表示栈位置，0表示栈的最下层节点
	// 返 回 值:  T*表示节点指针，NULL表示节点不存在
	//////////////////////////////////////////////////////////////////////////
	T* at(int i)
	{
		if(i<0 || i>m_iTopPtr)
			return NULL;
		return &m_Stack[i];
	}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取栈顶节点指针
	// 作    者:  邵凯田
	// 创建时间:  2015-4-9 10:59
	// 参数说明:  void
	// 返 回 值:  T*表示节点指针，NULL表示节点不存在(即栈为空)
	//////////////////////////////////////////////////////////////////////////
	T* top()
	{
		if(m_iTopPtr < 0)
			return NULL;
		return &m_Stack[m_iTopPtr];
	}

private:
	T m_Stack[STACK_SIZE];
	int m_iTopPtr;//当前指向栈的位置，-1表示栈为空
	int m_iMaxPtr;//最大的栈允许位置：STACK_SIZE-1

};

//////////////////////////////////////////////////////////////////////////
// 名    称:  SPtrStack
// 作    者:  邵凯田
// 创建时间:  2015-4-8 11:02
// 描    述:  面向指针的栈模板，由外部负责节点的释放
//////////////////////////////////////////////////////////////////////////
template<class T,int STACK_SIZE>
class SBASE_EXPORT SPtrStack
{
public:
	SPtrStack()
	{
		m_iTopPtr=-1;
		m_iMaxPtr = STACK_SIZE - 1;
	}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  入栈
	// 作    者:  邵凯田
	// 创建时间:  2015-4-8 10:54
	// 参数说明:  @pa表示待入栈的指针
	// 返 回 值:  true表示入栈成功，false表示栈溢出
	//////////////////////////////////////////////////////////////////////////
	bool push(T *pa)
	{
		if(m_iTopPtr < STACK_SIZE)
		{
			m_Stack[++m_iTopPtr] = pa;
			return true;
		}
		else
			return false;
	}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  出栈
	// 作    者:  邵凯田
	// 创建时间:  2015-4-8 10:56
	// 参数说明:  void
	// 返 回 值:  T*表示出栈的指针内容（外部负责释放），NULL表示栈为空
	//////////////////////////////////////////////////////////////////////////
	T* pop()
	{
		if(m_iTopPtr < 0)
			return NULL;
		T* pa = m_Stack[m_iTopPtr--];
		return pa;
	}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  是否栈为空
	// 作    者:  邵凯田
	// 创建时间:  2015-4-8 10:57
	// 参数说明:  void
	// 返 回 值:  true表示为空，false表示非空
	//////////////////////////////////////////////////////////////////////////
	bool is_empty()
	{
		return (m_iTopPtr == -1);
	}


	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取当前栈的大小
	// 作    者:  邵凯田
	// 创建时间:  2015-4-8 11:11
	// 参数说明:  void
	// 返 回 值:  int，0表示栈为空
	//////////////////////////////////////////////////////////////////////////
	int size()
	{
		return m_iTopPtr+1;
	}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取指定位置的栈内容
	// 作    者:  邵凯田
	// 创建时间:  2015-4-8 11:12
	// 参数说明:  @i表示栈位置，0表示栈的最下层节点
	// 返 回 值:  T*表示节点指针，NULL表示节点不存在
	//////////////////////////////////////////////////////////////////////////
	T* at(int i)
	{
		if(i<0 || i>m_iTopPtr)
			return NULL;
		return m_Stack[i];
	}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取栈顶节点指针
	// 作    者:  邵凯田
	// 创建时间:  2015-4-9 10:59
	// 参数说明:  void
	// 返 回 值:  T*表示节点指针，NULL表示节点不存在(即栈为空)
	//////////////////////////////////////////////////////////////////////////
	T* top()
	{
		if(m_iTopPtr < 0)
			return NULL;
		return m_Stack[m_iTopPtr];
	}

private:
	T* m_Stack[STACK_SIZE];
	int m_iTopPtr;
	int m_iMaxPtr;//最大的栈允许位置：STACK_SIZE-1

};

#endif//__SKT_STACK_TMPL_H__