/**
 *
 * 文 件 名 : SService.h
 * 创建日期 : 2011-11-4 13:47
 * 作    者 : 邵凯田(skt001@163.com)
 * 修改日期 : $Date: $
 * 当前版本 : $Revision: $
 * 功能描述 : 基础服务类
 * 修改记录 : 
 *            $Log: $
 *
 **/


#if !defined(__SKT_SERVICE_H__)
#define __SKT_SERVICE_H__

#include "SObject.h"
#include "SApi.h"

//////////////////////////////////////////////////////////////////////////
// 名    称:  基础服务类
// 作    者:  邵凯田
// 创建时间:  2011-11-4 13:49
// 描    述:  
//////////////////////////////////////////////////////////////////////////
class SBASE_EXPORT SService
{
public:
	SService();
	virtual ~SService();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  启动服务,虚函数，派生函数中必须先调用此函数
	// 作    者:  邵凯田
	// 创建时间:  2011-11-4 13:51
	// 参数说明:  void
	// 返 回 值:  true表示服务启动成功,false表示服务启动失败
	//////////////////////////////////////////////////////////////////////////
	virtual bool Start();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  停止服务，派生函数中必须先调用此函数
	// 作    者:  邵凯田
	// 创建时间:  2011-11-4 13:52
	// 参数说明:  void
	// 返 回 值:  true表示服务停止成功,false表示服务停止失败
	//////////////////////////////////////////////////////////////////////////
	virtual bool Stop();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  停止服务，同时在给定的超时时间内等待服务完全结束
	// 作    者:  邵凯田
	// 创建时间:  2011-11-4 14:02
	// 参数说明:  @iTimeout表示超时秒数，0表示不超时(一直阻塞下去)
	// 返 回 值:  true表示停止成功,false表示停止失败
	//////////////////////////////////////////////////////////////////////////
	bool StopAndWait(int iTimeout=0);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  返回当前服务是否已经完全停止
	// 作    者:  邵凯田
	// 创建时间:  2011-11-4 13:58
	// 参数说明:  void
	// 返 回 值:  true表示已经停止,false表示仍在运行
	//////////////////////////////////////////////////////////////////////////
	inline bool IsStoped()	
	{
		if(m_bQuit)
		{
			if(m_iRunThreads==0)
			{
				m_bRuning = false;
				return true;
			}
		}
		return false;
	};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  是否服务已经启动
	// 作    者:  邵凯田
	// 创建时间:  2012-4-20 13:31
	// 参数说明:  void
	// 返 回 值:  true/false
	//////////////////////////////////////////////////////////////////////////
	inline bool IsRuning()
	{
		return m_bRuning;
	}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取当前线程数量
	// 作    者:  邵凯田
	// 创建时间:  2015-11-18 13:15
	// 参数说明:  void
	// 返 回 值:  int
	//////////////////////////////////////////////////////////////////////////
	inline int  GetThreadCount(){return m_iRunThreads;};

public:
	////////////////////////////////////////////////////////////////////////
	// 描    述:  是否要退出服务
	// 作    者:  邵凯田
	// 创建时间:  2011-11-4 13:50
	// 参数说明:  
	// 返 回 值:  
	//////////////////////////////////////////////////////////////////////////
	inline bool IsQuit(){return m_bQuit;};

	////////////////////////////////////////////////////////////////////////
	// 描    述:  开始一个运行线程
	// 作    者:  邵凯田
	// 创建时间:  2011-11-7 16:15
	// 参数说明:  void
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void BeginThread();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  结束一个运行线程
	// 作    者:  邵凯田
	// 创建时间:  2011-11-7 16:15
	// 参数说明:  void
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void EndThread();
	
private:
	int m_iRunThreads;//当前运行的线程数量
	bool m_bQuit;//是否要退出服务
	bool m_bRuning;//是否服务处于运行中
};

#endif // !defined(__SKT_SERVICE_H__)
