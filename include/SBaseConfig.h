/**
 *
 * 文 件 名 : SBaseConfig.h
 * 创建日期 : 2007-07-14
 * 作    者 : 邵凯田(skt001@163.com)
 * 修改日期 : $Date: 2011/08/31 08:43:33 $
 * 当前版本 : $Revision: 1.1 $
 * 功能描述 : 配置文件基类
 * 修改记录 : 
 *            $Log: SBaseConfig.h,v $
 *            Revision 1.1  2011/08/31 08:43:33  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.2  2011/03/21 05:14:56  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.1  2011/02/25 03:12:05  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.1  2010/08/09 03:04:43  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.2  2010/01/22 01:24:25  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.1  2009/09/15 02:14:06  shaokt
 *            通迅记录分析装置项目首次提交
 *
 *            Revision 1.2  2008/09/11 11:13:07  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.1  2008/09/01 11:38:28  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.1  2008/09/01 08:58:00  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.8  2007/12/10 06:40:28  shaokt
 *            *** empty log message ***
 *
 *            Revision 1.7  2007/11/14 11:31:36  shaokt
 *            节点属性方法
 *
 *            Revision 1.6  2007/10/30 10:47:59  shaokt
 *            添加访问SBaseConfig类内部子对象的接口
 *
 *            Revision 1.5  2007/10/29 07:30:23  shaokt
 *            添加对象地址是否为4的倍数的检测函数，为检测ARM下由于pack(1)造成的内存问题
 *
 *            Revision 1.4  2007/10/24 06:15:34  shaokt
 *            int -> float
 *
 *            Revision 1.3  2007/10/24 03:05:11  shaokt
 *            添加搜索属性的方法
 *
 *            Revision 1.2  2007/09/11 08:17:52  shaokt
 *            基类更新
 *
 *            Revision 1.1  2007/08/15 03:09:22  shaokt
 *            *** empty log message ***
 *
 **/

#ifndef __SKTBASECONFIG_H__
#define __SKTBASECONFIG_H__

#include "SString.h"
#include "SList.h"

//////////////////////////////////////////////////////////////////////////
// 名    称:  SBaseConfig
// 作    者:  邵凯田
// 创建时间:  2011-11-14 14:00
// 描    述:  树形结构的配置类
//////////////////////////////////////////////////////////////////////////
class SBASE_EXPORT SBaseConfig
{
public:
	struct SBASE_EXPORT SConfigAttribute
	{
	public:
		SString m_sName;
		SString m_sValue;
	};

	SBaseConfig();
	virtual ~SBaseConfig();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  清除当前节点的所有子节点及属性
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:02
	// 参数说明:  void
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void clear();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取当前节点的路径，一直追朔到顶级节点
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:03
	// 参数说明:  void
	// 返 回 值:  返回使用"."分隔的路径名，各节点名称为m_sNodeName对应内容
	//////////////////////////////////////////////////////////////////////////
	SString GetPath();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  增加下级节点
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:04
	// 参数说明:  @sNodeName子节点的名称
	//         :  @pStrAttributs表示属性串，aa=11;bb=22;
	//         :  @pStrNodeValue表示节点值内容
	// 返 回 值:  返回新增加的子节点实例指针
	//////////////////////////////////////////////////////////////////////////
	SBaseConfig * AddChildNode(SString sNodeName="", const char* pStrAttributs=NULL, const char* pStrNodeValue=NULL);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  插入新的节点，新节点必须是new出来的，插入后由当前实例负责释放
	// 作    者:  邵凯田
	// 创建时间:  2013:12:11 10:28
	// 参数说明:  @pNew
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void AddChildNode(SBaseConfig *pNew);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  从当前实例移除指定的节点，但并不释放被移除的节点，调用者应负责释放
	// 作    者:  邵凯田
	// 创建时间:  2013:12:11 10:36
	// 参数说明:  @pSub
	// 返 回 值:  true/false
	//////////////////////////////////////////////////////////////////////////
	bool RemoveChildNode(SBaseConfig *pSub);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  判断当前节点及其子节点是否完全相同
	// 作    者:  邵凯田
	// 创建时间:  2013:12:12 16:13
	// 参数说明:  @pNode为另一个节点
	// 返 回 值:  true表示相同，false表示不同
	//////////////////////////////////////////////////////////////////////////
	bool IsNodeSame(SBaseConfig *pNode);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  替换当前节点及其子节点的属性值，如果等于oldVal则替换为newVal
	// 作    者:  邵凯田
	// 创建时间:  2013:12:12 16:18
	// 参数说明:  
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void ReplaceNodeAttrVal(SString &oldVal,SString  &newVal);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  增加下级节点
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:05
	// 参数说明:  @sNodeName子节点的名称
	// 返 回 值:  返回新增加的子节点实例指针
	//////////////////////////////////////////////////////////////////////////
	SBaseConfig * AddChildNodeEx(const char* sNodeName="");

	////////////////////////////////////////////////////////////////////////
	// 描    述:  设置节点属性,字符型
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:05
	// 参数说明:  @sAttrName属性名称
	//            @sAttrValue属性值
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void SetAttribute(SString sAttrName,SString sAttrValue);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  设置节点属性，整型
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:05
	// 参数说明:  @sAttrName属性名称
	//            @iAttrValue属性值
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void SetAttributeI(SString sAttrName,int iAttrValue);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  设置节点属性，浮点型
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:05
	// 参数说明:  @sAttrName属性名称
	//            @fAttrValue属性值
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void SetAttributeF(SString sAttrName,float fAttrValue);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  设置节点属性，void指针型
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:05
	// 参数说明:  @sAttrName属性名称
	//            @sAttrValue属性值
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void SetAttributeP(SString sAttrName,void* fAttrValue);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  设置节点属性，字符型，高效函数
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:05
	// 参数说明:  @sAttrName属性名称
	//            @sAttrValue属性值
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void SetAttributeEx(const char* sAttrName,const char* sAttrValue);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取当前节点名
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:08
	// 参数说明:  void
	// 返 回 值:  节点名称
	//////////////////////////////////////////////////////////////////////////
	inline SString GetNodeName()	{return m_sNodeName;};

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取当前节点值
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:08
	// 参数说明:  void
	// 返 回 值:  节点值
	//////////////////////////////////////////////////////////////////////////
	inline SString GetNodeValue()	{return m_sNodeValue;};

	////////////////////////////////////////////////////////////////////////
	// 描    述:  设置节点名称
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:09
	// 参数说明:  @s表示节点名称
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void SetNodeName(SString s);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  设置节点名称
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:09
	// 参数说明:  @s表示节点名称
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void SetNodeNameEx(const char* s);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  设置节点值
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:10
	// 参数说明:  @s表示节点值
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void SetNodeValue(SString s);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  设置节点值
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:11
	// 参数说明:  @s表示节点值
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void SetNodeValueEx(const char* s);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  测试是否当前节点存在指定的属性
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:13
	// 参数说明:  @sAttrName表示属性名
	// 返 回 值:  true表示属性存在，false表示属性不存在
	//////////////////////////////////////////////////////////////////////////
	bool IsAttribute(SString sAttrName);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取当前节点下的指定的属性
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:14
	// 参数说明:  @sAttrname表示属性名
	// 返 回 值:  属性值，缺少此属性时返回空字符串
	//////////////////////////////////////////////////////////////////////////
	SString GetAttribute(SString sAttrName);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取当前节点下的指定的整型属性
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:15
	// 参数说明:  @sAttrName表示属性名
	// 返 回 值:  属性值，缺少时返回0
	//////////////////////////////////////////////////////////////////////////
	int GetAttributeI(SString sAttrName);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取当前节点下的指定的浮点型属性
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:15
	// 参数说明:  @sAttrName表示属性名
	// 返 回 值:  属性值，缺少时返回0
	//////////////////////////////////////////////////////////////////////////
	float GetAttributeF(SString sAttrName);


	////////////////////////////////////////////////////////////////////////
	// 描    述:  引用方式取属性，字符串
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:16
	// 参数说明:  @sAttrName表示属性名
	//            @sAttrValue表示属性值
	// 返 回 值:  true表示属性存在，且值已经存入sAttrValue，false表示属性不存在
	//////////////////////////////////////////////////////////////////////////
	bool GetAttribute(SString sAttrName,SString &sAttrValue);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  引用方式取属性，整型
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:16
	// 参数说明:  @sAttrName表示属性名
	//            @iAttrValue表示属性值
	// 返 回 值:  true表示属性存在，且值已经存入iAttrValue，false表示属性不存在
	//////////////////////////////////////////////////////////////////////////
	bool GetAttribute(SString sAttrName,int &iAttrValue);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  引用方式取属性，浮点型
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:16
	// 参数说明:  @sAttrName表示属性名
	//            @fAttrValue表示属性值
	// 返 回 值:  true表示属性存在，且值已经存入fAttrValue，false表示属性不存在
	//////////////////////////////////////////////////////////////////////////
	bool GetAttribute(SString sAttrName,float &fAttrValue);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取当前节点下指定路径下的某个属性
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:18
	// 参数说明:  @sNodePath表示节点路径，如：body.GROUPTITLE(0).GROUP<character='PARAM'>
	//            @sAttrName表示属性名
	// 返 回 值:  属性值
	//////////////////////////////////////////////////////////////////////////
	SString GetAttribute(SString sNodePath,const char* sAttrName);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取当前节点下指定路径下的节点内容
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:19
	// 参数说明:  @sNodePath表示节点路径，如：body.GROUPTITLE(0).GROUP<character='PARAM'>
	// 返 回 值:  节点内容
	//////////////////////////////////////////////////////////////////////////
	SString GetNodeValue(SString sNodePath);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取当前节点的属性数量
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:23
	// 参数说明:  void
	// 返 回 值:  属性数量
	//////////////////////////////////////////////////////////////////////////
	int GetAttributeCount();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取当前节点的指定第index个属性的属性名
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:23
	// 参数说明:  @index为属性序号，从0开始编号
	// 返 回 值:  属性名
	//////////////////////////////////////////////////////////////////////////
	SString GetAttributeName(int index);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取下级节点数量
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:25
	// 参数说明:  @sNodeName表示待统计下级节点的名称，空表示全部节点
	//            @sCondition表示统计条件，空格分隔多个条件，如：name1='val1' name2='val2'
	// 返 回 值:  满足条件的数量
	//////////////////////////////////////////////////////////////////////////
	int GetChildCount(SString sNodeName="",SString sCondition="");

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取第index个下级节点,index从0开始
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:30
	// 参数说明:  @index表示序号,index从0开始
	//            @sNodeName表示待统计下级节点的名称，空表示全部节点
	//            @sCondition表示统计条件，空格分隔多个条件，如：name1='val1' name2='val2'
	// 返 回 值:  指定的子节点实例指针，无满足时返回NULL
	//////////////////////////////////////////////////////////////////////////
	SBaseConfig* GetChildNode(int index,SString sNodeName="",SString sCondition="");

	////////////////////////////////////////////////////////////////////////
	// 描    述:  根据属性条件取下级节点
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:31
	// 参数说明:  @sNodeName表示节点名称
	//            @sAttrName1表示过滤属性名1，空表示不使用此条件
	//            @sAttrVal1表示过滤属性值1
	//            其它字符同上
	// 返 回 值:  指定的子节点实例指针，无满足时返回NULL
	//////////////////////////////////////////////////////////////////////////
	SBaseConfig* GetChildNode(SString sNodeName,
					SString sAttrName1="",SString sAttrVal1="",
					SString sAttrName2="",SString sAttrVal2="",
					SString sAttrName3="",SString sAttrVal3="",
					SString sAttrName4="",SString sAttrVal4="",
					SString sAttrName5="",SString sAttrVal5="",
					SString sAttrName6="",SString sAttrVal6="");

	////////////////////////////////////////////////////////////////////////
	// 描    述:  检查当前节点是否符合指定的条件
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:33
	// 参数说明:  @sAttr表示节点属性的过滤字符串，空格分隔多个条件，如：name1='val1' name2='val2'
	// 返 回 值:  true表示节点满足指定条件
	//////////////////////////////////////////////////////////////////////////
	bool CheckNodeAttribute(SString sAttr);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  根据特定的层次字符串取节点指针
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:34
	// 参数说明:  @sGroup表示节点路径，如：body.GROUPTITLE(0).GROUP<character='PARAM'>
	// 返 回 值:  指定的子节点实例指针，无满足时返回NULL
	//////////////////////////////////////////////////////////////////////////
	SBaseConfig* SearchChild(SString sGroup);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  搜索指定节点的字符串属性
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:35
	// 参数说明:  @sGroup表示节点路径，如：body.GROUPTITLE(0).GROUP<character='PARAM'>
	//            @sAttr表示属性名称
	// 返 回 值:  属性值
	//////////////////////////////////////////////////////////////////////////
	SString SearchNodeAttribute(SString sGroup,SString sAttr);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  搜索指定节点的整数属性
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:35
	// 参数说明:  @sGroup表示节点路径，如：body.GROUPTITLE(0).GROUP<character='PARAM'>
	//            @sAttr表示属性名称
	// 返 回 值:  属性值
	//////////////////////////////////////////////////////////////////////////
	int SearchNodeAttributeI(SString sGroup,SString sAttr);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  搜索指定节点的浮点属性
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:35
	// 参数说明:  @sGroup表示节点路径，如：body.GROUPTITLE(0).GROUP<character='PARAM'>
	//            @sAttr表示属性名称
	// 返 回 值:  属性值
	//////////////////////////////////////////////////////////////////////////
	float SearchNodeAttributeF(SString sGroup,SString sAttr);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  搜索指定节点的值
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:36
	// 参数说明:  @sGroup表示节点路径，如：body.GROUPTITLE(0).GROUP<character='PARAM'>
	// 返 回 值:  匹配节点的节点值，无匹配节点时返回空字符串
	//////////////////////////////////////////////////////////////////////////
	SString SearchNodeValue(SString sGroup);
	
	////////////////////////////////////////////////////////////////////////
	// 描    述:  取属性集的指针
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:37
	// 参数说明:  void
	// 返 回 值:  SPtrList<SConfigAttribute>*
	//////////////////////////////////////////////////////////////////////////
	inline SPtrList<SConfigAttribute>* GetAttributePtr()	{return &m_Attribute;};

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取子节点集合的指针
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:38
	// 参数说明:  void
	// 返 回 值:  SPtrList<SBaseConfig>*
	//////////////////////////////////////////////////////////////////////////
	inline SPtrList<SBaseConfig>* GetChildPtr()			{return &m_ChildConfig;};

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取上级父节点指针
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:38
	// 参数说明:  void
	// 返 回 值:  父节点SBaseConfig*，如果已经是顶级节点，则返回NULL
	//////////////////////////////////////////////////////////////////////////
	inline SBaseConfig* GetParentNode()					{return m_pParent;};

public:
	SString m_sNodeName;//当前配置节点名
	SString m_sNodeValue;//当前配置节点值
	SPtrList<SConfigAttribute> m_Attribute;//当前配置属性
	SPtrList<SBaseConfig> m_ChildConfig;//下级配置
	SBaseConfig *m_pParent;//上级
};

//////////////////////////////////////////////////////////////////////////
// 名    称:  SBaseConfigSet
// 作    者:  邵凯田
// 创建时间:  2011-11-14 14:40
// 描    述:  配置文件集合类
//////////////////////////////////////////////////////////////////////////
class SBASE_EXPORT SBaseConfigSet
{
public:
	SBaseConfigSet();
	~SBaseConfigSet();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  添加新的配置实例对象
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:41
	// 参数说明:  @pCfg表示新配置实例的首节点指针
	//            @sName表示此配置的名称
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void AddConfig(SBaseConfig* pCfg,SString sName);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  取指定的配置实例对象指针
	// 作    者:  邵凯田
	// 创建时间:  2011-11-14 14:42
	// 参数说明:  @sName等提取配置实例的名称
	// 返 回 值:  目标配置实例的首节点指针，无匹配时返回NULL
	//////////////////////////////////////////////////////////////////////////
	SBaseConfig* GetConfig(SString sName);

private:
	SPtrList<SBaseConfig> m_ConfigSet;//配置文件集
	SClassList<SString> m_ConfigName;//配置名
};


#endif

